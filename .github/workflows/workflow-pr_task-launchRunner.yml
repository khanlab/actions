name: Launch Ephemeral Runner

on:
  workflow_call:
    inputs:
      pr_number:
        description: "PR number to test"
        required: true
        type: string
      repository:
        description: "Github repository (owner/name)"
        required: true
        type: string
    secrets:
      OS_APPLICATION_CREDENTIAL_ID:
        required: true
      OS_APPLICATION_CREDENTIAL_SECRET:
        required: true
      RUNNER_PAT:
        required: true
    outputs:
      vm_id:
        description: "Openstack VM ID"
        value: ${{ jobs.launch.outputs.vm_id }}

jobs:
  launch:
    runs-on: ubuntu-latest
    env:
      OS_AUTH_TYPE:                     v3applicationcredential
      OS_AUTH_URL:                      https://arbutus.cloud.computecanada.ca:5000/v3
      OS_USERNAME:                      djay
      OS_USER_DOMAIN_NAME:              CCDB
      OS_APPLICATION_CREDENTIAL_ID:     ${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}
      OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}
      RUNNER_PAT:                       ${{ secrets.RUNNER_PAT }}
    outputs:
      vm_id:                            ${{ steps.launch.outputs.vm_id }}
    steps:
      - name: Extract repo owner and name
        id: split
        shell: bash
        run: |
          IFS='/' read -r owner name <<< "${{ inputs.repository }}"
          echo "owner=$owner" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Get runner latest version
        id: latest_runner_version
        run: |
          LATEST_VERSION=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 -R actions/runner | grep -oP '(?<=v)[0-9.]+' | head -1)
          echo "Latest version: $LATEST_VERSION"
          echo runner_latest_version=$LATEST_VERSION >> $GITHUB_OUTPUT

      - name: Checkout reusable workflow repo
        uses: actions/checkout@v4
        with:
          repository: khanlab/actions
          ref: djay/add-wetRunTestLogic
          path: actions

      - name: Install OpenStack & Tools
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-openstackclient jq gettext-base

      - name: Validate PAT
        shell: bash
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${RUNNER_PAT}" \
            https://api.github.com/user)
          if [ "$status" -ne 200 ]; then
            echo "Invalid PAT (HTTP $status)" >&2
            exit 1
          fi

      - name: Get runner registration token
        shell: bash
        id: token
        run: |
          response=$(curl -sX POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${RUNNER_PAT}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ inputs.repository }}/actions/runners/registration-token)
          token=$(echo "$response" | jq -r .token)
          echo "token=$token" >> $GITHUB_OUTPUT

      - name: Generate cloud-init
        shell: bash
        run: |
          export PR_NUMBER=${{ inputs.pr_number }}
          export GITHUB_RUNNER_TOKEN=${{ steps.token.outputs.token }}
          export GITHUB_REPO_OWNER=${{ steps.split.outputs.owner }}
          export GITHUB_REPO_NAME=${{ steps.split.outputs.name }}
          export RUNNER_LATEST_VERSION=${{ steps.latest_runner_version.outputs.runner_latest_version }}
          # Only substitute the four env vars, keep all other ${â€¦} intact
          envsubst '$PR_NUMBER $GITHUB_RUNNER_TOKEN $GITHUB_REPO_OWNER $GITHUB_REPO_NAME $RUNNER_LATEST_VERSION' \
            < actions/.github/templates/cloud-init.yml > cloud-init.generated.yml

      - name: Launch VM
        id: launch
        shell: bash
        run: |
          openstack server create \
            --image "Ubuntu-22.04.4-Jammy-x64-2024-06" \
            --flavor c16-60gb-576 \
            --network def-akhanf-dev-network \
            --user-data cloud-init.generated.yml \
            ${{ steps.split.outputs.name }}-pr-${{ inputs.pr_number }}
          VM_ID=$(openstack server list --name ${{ steps.split.outputs.name }}-pr-${{ inputs.pr_number }} -f value -c ID)
          echo "vm_id=$VM_ID" >> $GITHUB_OUTPUT

      - name: Wait for runner registration
        shell: bash
        run: |
          echo "Waiting for runner to appear..."
          for i in {1..60}; do
            runners=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${RUNNER_PAT}" \
              https://api.github.com/repos/${{ inputs.repository }}/actions/runners \
              | jq -r '.runners[].name')
            if echo "$runners" | grep -q "${{ steps.split.outputs.name }}-pr-${{ inputs.pr_number }}"; then
              echo "Runner registered."
              exit 0
            fi
            sleep 10
          done
          echo "Runner did not register in time." >&2
          exit 1
