---
# Adapted from @pvandyken's composite action
name: Build and cache Python project
description: Install project dependencies and optionally install project
inputs:
  python-version:
    description: Python version to setup
    required: true
    type: string
  cache-id:
    description: Reference id to define cache
    required: false
    default: ${{ github.event.pull_request.id || github.event.after }}
    type: string
  manager:
    description: Dependency manager used (e.g. poetry)
    required: false
    default: "poetry"
    type: string
  install-library:
    description: Indicate whether project library should be installed
    required: false
    default: false
    type: boolean

runs:
  using: composite
  steps:
    - name: Clone repo
      uses: actions/checkout@v3

    # Setup & configure dependency manager
    - name: Cache manager installation
      uses: actions/cache@v3
      id: cached-manager
      with:
        path: ~/.local
        key: ${{ runner.os }}-${{ inputs.manager }}-${{ inputs.cache-id }}

    - name: Install poetry
      uses: snok/install-poetry@v1
      if: inputs.manager == 'poetry' && steps.cached-manager.outputs.cache-hit != 'true'
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Setup & configure Python
    - name: Setup python
      uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: ${{ inputs.python-version }}
        cache: "${{ inputs.manager }}"

    # Install dependencies with manager, if necessary
    - name: Install dependencies
      if: inputs.manager == 'poetry' && steps.setup-python.outputs.cache-hit != 'true'
      shell: bash
      run: poetry install --no-interaction --no-ansi --no-root --with dev

    - name: Install library
      if: inputs.manager == 'poetry' && inputs.install-library
      shell: bash
      run: poetry install --no-interaction --no-ansi
